import java.util.HashMap;
import java.util.Scanner;

public class CurrencyConverter {
    private static HashMap<String, Double> exchangeRates = new HashMap<>();

    public static void main(String[] args) {
        initializeExchangeRates();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to the Currency Converter!");

        System.out.print("Enter the base currency (e.g., USD, EUR): ");
        String baseCurrency = scanner.nextLine().toUpperCase();

        if (!exchangeRates.containsKey(baseCurrency)) {
            System.out.println("Invalid base currency.");
            return;
        }

        System.out.print("Enter the target currency (e.g., USD, EUR): ");
        String targetCurrency = scanner.nextLine().toUpperCase();

        if (!exchangeRates.containsKey(targetCurrency)) {
            System.out.println("Invalid target currency.");
            return;
        }

        System.out.print("Enter the amount to convert: ");
        double amount;
        try {
            amount = Double.parseDouble(scanner.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid amount.");
            return;
        }

        double convertedAmount = convertCurrency(baseCurrency, targetCurrency, amount);
        System.out.printf("Converted amount: %.2f %s%n", convertedAmount, targetCurrency);
    }

    private static void initializeExchangeRates() {
        // Hardcoded exchange rates for simplicity
        exchangeRates.put("USD", 1.0);
        exchangeRates.put("EUR", 0.85);
        exchangeRates.put("GBP", 0.75);
        exchangeRates.put("INR", 74.0);
        exchangeRates.put("JPY", 110.0);
        // Add more currencies and their exchange rates as needed
    }

    private static double convertCurrency(String baseCurrency, String targetCurrency, double amount) {
        double baseRate = exchangeRates.get(baseCurrency);
        double targetRate = exchangeRates.get(targetCurrency);
        return amount * (targetRate / baseRate);
    }
}